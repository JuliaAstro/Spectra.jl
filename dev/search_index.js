var documenterSearchIndex = {"docs":
[{"location":"#Spectra.jl-1","page":"Home","title":"Spectra.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Utilities for interfacing with astronomical spectra and synthetic spectra libraries.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"index.md\", \"spectrum.md\", \"ops.md\"]","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"From the REPL, press ] to enter Pkg mode","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(v 1.1) pkg> add https://github.com/JuliaAstro/Spectra.jl\n(v 1.1) pkg> test Spectra\n[...]\njulia> using Spectra","category":"page"},{"location":"#Citation-1","page":"Home","title":"Citation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you found this software or any derivative work useful in your academic work, I ask that you please cite the code.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"TODO","category":"page"},{"location":"spectrum/#Spectrum-1","page":"Spectrum","title":"Spectrum","text":"","category":"section"},{"location":"spectrum/#","page":"Spectrum","title":"Spectrum","text":"Here we will go over the Spectrum type and how we can use it to interact with spectra.","category":"page"},{"location":"spectrum/#The-Spectrum-Type-1","page":"Spectrum","title":"The Spectrum Type","text":"","category":"section"},{"location":"spectrum/#Basic-operations-1","page":"Spectrum","title":"Basic operations","text":"","category":"section"},{"location":"spectrum/#","page":"Spectrum","title":"Spectrum","text":"Spectrum\nlength\nsize","category":"page"},{"location":"spectrum/#Spectra.Spectrum","page":"Spectrum","title":"Spectra.Spectrum","text":"Spectrum(wave, flux, [sigma]; name=\"\")\n\nA signle dimensional astronomical spectrum. If no sigma are provided, they are assumed to be unity. The name is an optional identifier for the Spectrum. Note that the dimensions of each array must be equal or an error will be thrown.\n\nExamples\n\njulia> using Spectra\n\njulia> wave = range(1e4, 4e4, length=1000);\n\njulia> flux = randn(size(wave));\n\njulia> spec = Spectrum(wave, flux)\nSpectrum:\n\njulia> spec = Spectrum(wave, flux, name=\"Just Noise\")\nSpectrum: Just Noise\n\n\nThere is easy integration with Unitful and its sub-projects\n\njulia> using Spectra, Unitful, UnitfulAstro\n\njulia> wave = range(1u\"μm\", 4u\"μm\", length=1000) .|> u\"angstrom\";\n\njulia> sigma = randn(size(wave))u\"erg/cm^2/s/angstrom\";\n\njulia> flux = sigma .+ 100u\"W/m^2/m\"; # There will be implicit unit promotion\n\njulia> unit(flux[1])\nkg m^-1 s^-3\n\njulia> spec = Spectrum(wave, flux, sigma, name=\"Unitful\")\nSpectrum: Unitful\n\n\n\n\n\n","category":"type"},{"location":"spectrum/#Base.length","page":"Spectrum","title":"Base.length","text":"length(::Spectrum)\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Base.size","page":"Spectrum","title":"Base.size","text":"size(::Spectrum)\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Arithmetic-1","page":"Spectrum","title":"Arithmetic","text":"","category":"section"},{"location":"spectrum/#","page":"Spectrum","title":"Spectrum","text":"The following basic arithmetic is provided","category":"page"},{"location":"spectrum/#","page":"Spectrum","title":"Spectrum","text":"Function Notes\n+(::Spectrum, A) \n-(::Spectrum, A) \n*(::Spectrum, A) sigma updated by sigma leftlvert A rightrvert\n/(::Spectrum, A) sigma updated by sigma leftlvert A rightrvert^-1","category":"page"},{"location":"spectrum/#Unitful-helpers-1","page":"Spectrum","title":"Unitful helpers","text":"","category":"section"},{"location":"spectrum/#","page":"Spectrum","title":"Spectrum","text":"unit\nustrip","category":"page"},{"location":"spectrum/#Unitful.unit","page":"Spectrum","title":"Unitful.unit","text":"Unitful.unit(::Spectrum)\n\nGet the units of a spectrum. Returns a tuple of the wavelength units and flux/sigma units\n\nExamples\n\njulia> using Spectra, Unitful, UnitfulAstro\n\njulia> wave = range(1e4, 3e4, length=1000) |> collect;\n\njulia> flux = wave .* 10 .+ randn(1000);\n\njulia> spec = Spectrum(wave * u\"angstrom\", flux * u\"W/m^2/angstrom\");\n\njulia> w_unit, f_unit = unit(spec)\n(Å, W Å^-1 m^-2)\n\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Unitful.ustrip","page":"Spectrum","title":"Unitful.ustrip","text":"Unitful.ustrip(::Spectrum)\n\nRemove the units from a spectrum. Useful for processing spectra in tools that don't play nicely with Unitful.jl\n\nExamples\n\njulia> using Spectra, Unitful, UnitfulAstro\n\njulia> wave = range(1e4, 3e4, length=1000) |> collect;\n\njulia> flux = wave .* 10 .+ randn(1000);\n\njulia> spec = Spectrum(wave*u\"angstrom\", flux*u\"W/m^2/angstrom\");\n\njulia> strip_spec = ustrip(spec);\n\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Index-1","page":"Spectrum","title":"Index","text":"","category":"section"},{"location":"spectrum/#","page":"Spectrum","title":"Spectrum","text":"","category":"page"},{"location":"ops/#Operations-1","page":"Operations","title":"Operations","text":"","category":"section"},{"location":"ops/#","page":"Operations","title":"Operations","text":"The following operations and transformations are provided to work on Spectra","category":"page"},{"location":"ops/#Extinction-1","page":"Operations","title":"Extinction","text":"","category":"section"},{"location":"ops/#","page":"Operations","title":"Operations","text":"extinct\nextinct!","category":"page"},{"location":"ops/#Spectra.extinct","page":"Operations","title":"Spectra.extinct","text":"extinct(::Spectrum, Av::Real, Rv::Real=3.1; law=ccm89)\n\nExtinct a spectrum given the total extinction Av and the relative attenuation Rv. law must be a function with signature law(wave, Rv), by default we use ccm89 from DustExtinction.jl . \n\nExamples\n\njulia> using Spectra\n\njulia> spec = Spectrum(range(1e4, 3e4, length=1000), randn(1000) .+ 100);\n\njulia> extincted_spec = extinct(spec, 0.3);\n\njulia> extinct!(spec, 0.3);\n\njulia> spec.flux ≈ extincted_spec.flux\ntrue\n\n\n\n\n\n\n","category":"function"},{"location":"ops/#Spectra.extinct!","page":"Operations","title":"Spectra.extinct!","text":"extinct!(::Spectrum, Av::Real, Rv::Real=3.1; law=ccm89)\n\nIn-place version of extinct\n\n\n\n\n\n","category":"function"},{"location":"ops/#Resampling-1","page":"Operations","title":"Resampling","text":"","category":"section"},{"location":"ops/#","page":"Operations","title":"Operations","text":"resample\nresample!","category":"page"},{"location":"ops/#Spectra.resample","page":"Operations","title":"Spectra.resample","text":"resample!(::Spectrum, wavelengths)\nresample!(::Spectrum, other::Spectrum)\n\nResamples a spectrum onto a new wavelength grid- either given explicitly or taken from the wavelengths of another spectrum. The resampling is done using Interpolations.interpolate with a Gridded(Linear()) boundary condition.\n\nwarning: Warning\nWhen using Unitful, there can be floating point errors when converting the wavelengths to the units of the given Spectrum's wavelengths. When this happens it is possible to create a BoundsError (eg 3.0 μm → 30000.00000004 Å). When this happens the wavelength grid is explicitly truncated to the minimum and maximum of the spectrum wavelengths.\n\n\n\n\n\n","category":"function"},{"location":"ops/#Spectra.resample!","page":"Operations","title":"Spectra.resample!","text":"resample!(::Spectrum, wavelengths)\nresample!(::Spectrum, other::Spectrum)\n\nIn-place version of resample\n\n\n\n\n\n","category":"function"}]
}
