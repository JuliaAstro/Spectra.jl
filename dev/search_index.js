var documenterSearchIndex = {"docs":
[{"location":"#Spectra.jl-1","page":"Home","title":"Spectra.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Utilities for interfacing with astronomical spectra and synthetic spectra libraries.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"From the REPL, press ] to enter Pkg mode","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(v 1.1) pkg> add https://github.com/JuliaAstro/Spectra.jl\n(v 1.1) pkg> test Spectra\n[...]\njulia> using Spectra","category":"page"},{"location":"#Citation-1","page":"Home","title":"Citation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you found this software or any derivative work useful in your academic work, I ask that you please cite the code.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"TODO","category":"page"},{"location":"spectrum/#Spectrum-1","page":"Spectrum","title":"Spectrum","text":"","category":"section"},{"location":"spectrum/#","page":"Spectrum","title":"Spectrum","text":"Here we will go over the Spectrum type and how we can use it to interact with spectra.","category":"page"},{"location":"spectrum/#The-Spectrum-Type-1","page":"Spectrum","title":"The Spectrum Type","text":"","category":"section"},{"location":"spectrum/#","page":"Spectrum","title":"Spectrum","text":"Spectrum","category":"page"},{"location":"spectrum/#Spectra.Spectrum","page":"Spectrum","title":"Spectra.Spectrum","text":"Spectrum(wave, flux, [sigma]; name=\"\")\n\nA signle dimensional astronomical spectrum. If no sigma are provided, they are assumed to be unity. The name is an optional identifier for the Spectrum. Note that the dimensions of each array must be equal or an error will be thrown.\n\nExamples\n\njulia> using Spectra\n\njulia> wave = range(1e4, 4e4, length=1000);\n\njulia> flux = randn(size(wave));\n\njulia> spec = Spectrum(wave, flux)\nSpectrum:\n\njulia> spec = Spectrum(wave, flux, name=\"Just Noise\")\nSpectrum: Just Noise\n\n\nThere is easy integration with Unitful and its sub-projects\n\njulia> using Spectra, Unitful, UnitfulAstro\n\njulia> wave = range(1u\"μm\", 4u\"μm\", length=1000) .|> u\"angstrom\";\n\njulia> sigma = randn(size(wave))u\"erg/cm^2/s/angstrom\";\n\njulia> flux = sigma .+ 100u\"W/m^2/m\"; # There will be implicit unit promotion\n\njulia> unit(flux[1])\nkg m^-1 s^-3\n\njulia> spec = Spectrum(wave, flux, sigma, name=\"Unitful\")\nSpectrum: Unitful\n\n\n\n\n\n","category":"type"},{"location":"spectrum/#","page":"Spectrum","title":"Spectrum","text":"This provides the following standard library overrides","category":"page"},{"location":"spectrum/#","page":"Spectrum","title":"Spectrum","text":"length\nsize","category":"page"},{"location":"spectrum/#Base.length","page":"Spectrum","title":"Base.length","text":"length(::Spectrum)\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Base.size","page":"Spectrum","title":"Base.size","text":"size(::Spectrum)\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Index-1","page":"Spectrum","title":"Index","text":"","category":"section"},{"location":"spectrum/#","page":"Spectrum","title":"Spectrum","text":"","category":"page"},{"location":"ops/#Operations-1","page":"Operations","title":"Operations","text":"","category":"section"},{"location":"ops/#","page":"Operations","title":"Operations","text":"The following operations and transformations are provided to work on Spectra","category":"page"},{"location":"ops/#Extinction-1","page":"Operations","title":"Extinction","text":"","category":"section"},{"location":"ops/#","page":"Operations","title":"Operations","text":"extinct\nextinct!","category":"page"},{"location":"ops/#Spectra.extinct","page":"Operations","title":"Spectra.extinct","text":"extinct(::Spectrum, Av::Real, Rv::Real=3.1; law::Function=ccm89)\n\nExtinct a spectrum given the total extinction Av and the relative attenuation Rv. law must be a function with signature law(wave, Rv), by default we use ccm89 from DustExtinction.jl . \n\nExamples\n\njulia> using Spectra\n\njulia> spec = Spectrum(range(1e4, 3e4, length=1000), randn(1000) .+ 100);\n\njulia> extincted_spec = extinct(spec, 0.3);\n\njulia> extinct!(spec, 0.3);\n\njulia> spec.flux ≈ extincted_spec.flux\ntrue\n\n\n\n\n\n\n","category":"function"},{"location":"ops/#Spectra.extinct!","page":"Operations","title":"Spectra.extinct!","text":"extinct!(::Spectrum, Av::Real, Rv::Real=3.1; law=:ccm89)\n\nIn-place version of extinct\n\nSee Also\n\nextinct\n\n\n\n\n\n","category":"function"}]
}
